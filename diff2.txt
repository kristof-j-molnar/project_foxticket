diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 1aac7be..918d182 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -2,7 +2,7 @@
 
 ## Restricted branches
 - `development` - all the implemented features which are done and deployed
-- `master` - stable version deployed
+- `main` - stable version deployed
 
 ## Workflow
 
@@ -30,5 +30,6 @@ We follow the rules below:
 
 ## Pull Request guidelines
 
+- The name of the pull request should contain the code and the name of the corresponding ticket
 - From `feature_branch` to `development`: add two developers and PM as reviewers, 3 approves needed for merging
 - From `development` to `master`: this is managed by the PM
diff --git a/README.md b/README.md
index 102ef3e..d88a795 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-# Spring Tribes Project repository
+# Spring Fox Ticket Project repository
 
 ## Initial dependencies
 
@@ -36,7 +36,6 @@
 - After global exception handler is present, create and throw custom exceptions in error scenarios
 - Use the object wrapper for primitive types, e.g. `Long` instead of `long`
 - Use `this` keyword only to avoid variable name conflicts
-- Do not use any HTTP specific class/logic inside your service layer
 - Use the [code formatting](https://blog.jetbrains.com/idea/2020/06/code-formatting/) feature in Intellij (CTRL+ALT+L / ⌥⌘L)
 - Have at least 90% test coverage regarding services (unit test) and controllers (integration tests)
 - Use [Google Java Style Guide](https://google.github.io/styleguide/javaguide.html)
@@ -54,15 +53,11 @@
 
 Project details:
 
-- [Project.md](project.md)
+- examples is docs folder
 
 Jira board:
 
-- https://greenfoxacademy.atlassian.net/jira/software/projects/OSCT/boards/214
-
-Endpoint tracker:
-
-- https://docs.google.com/spreadsheets/d/14rjj8mLEjQBFdVQQ43t_AJT2bQgHVCVc3FI9GYKcYMw/edit?usp=sharing
+- https://greenfoxacademy.atlassian.net/jira/software/projects/ATBFB/boards/251
 
 Contribution:
 
@@ -84,14 +79,14 @@ See [CONTRIBUTING](CONTRIBUTING.md)
 
 ### Start New Feature/Bugfix
 
-In order to minimize merge conflicts later always open a new feature branch from the most recent state of the `development` branch on GitHub.
+In order to minimize merge conflicts later always open a new feature branch from the most recent state of the `master` branch on GitHub.
 
 - `git pull`
 - `git checkout -b <branch_name> origin/development`
 
 ### Update Feature Branch
 
-While you're working on your own feature/bugfix other developers make changes on `development` and it's required to update your branch to keep consistency of the codebase. You can do this in 2 ways.
+While you're working on your own feature/bugfix other developers make changes on `master` and it's required to update your branch to keep the consistency of the codebase. You can do this in 2 ways.
 
 [`git merge` vs `git rebase`](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)
 
@@ -99,15 +94,15 @@ While you're working on your own feature/bugfix other developers make changes on
 
 [`git rebase`](https://www.atlassian.com/git/tutorials/rewriting-history/git-rebase)
 
-Rebase rewrites commit history; therefore, do not use rebase on the `master` and `development` branches.
-On the other hand feel free to use rebase on your own branches.
+Rebase rewrites commit history; therefore, do not use rebase on the `master` branch.
+On the other hand, feel free to use rebase on your own branches.
 
-Use `git rebase development` while on your branch.
+Use `git rebase master` while on your branch.
 
 #### Merge
 
 [`git merge`](https://www.atlassian.com/git/tutorials/using-branches/git-merge)
 
-This creates a new commit (so called merge commit) containing changes from both your branch and the development branch.
+This creates a new commit (so-called merge commit) containing changes from both your branch and the development branch.
 
-Use `git merge development` while on your branch.
+Use `git merge master` while on your branch.
diff --git a/build.gradle b/build.gradle
index 159ed0e..f2d9c4c 100644
--- a/build.gradle
+++ b/build.gradle
@@ -38,9 +38,25 @@ jacocoTestReport {
 }
 
 dependencies {
+    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
+    //implementation 'org.springframework.boot:spring-boot-starter-security'
     implementation 'org.springframework.boot:spring-boot-starter-web'
+    implementation ('io.jsonwebtoken:jjwt:0.2')
+    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
+    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
+    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
+    implementation 'javax.xml.bind:jaxb-api:2.2.4'
     developmentOnly 'org.springframework.boot:spring-boot-devtools'
+    runtimeOnly 'com.mysql:mysql-connector-j'
     testImplementation 'org.springframework.boot:spring-boot-starter-test'
+    testImplementation 'org.springframework.security:spring-security-test'
+    testImplementation 'io.rest-assured:rest-assured:5.3.2'
+    implementation 'io.rest-assured:json-schema-validator:5.3.2'
+    testImplementation 'org.mockito:mockito-core:5.8.0'
+    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
+    testImplementation 'junit:junit:4.13.2'
+    testImplementation 'org.hamcrest:hamcrest-core:2.2'
+    testImplementation 'org.hamcrest:hamcrest:2.2'
 }
 
 tasks.named('test') {
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/BasicSpringProjectApplication.java b/src/main/java/com/greenfoxacademy/springwebapp/BasicSpringProjectApplication.java
index 3a3a23e..4f6e15d 100644
--- a/src/main/java/com/greenfoxacademy/springwebapp/BasicSpringProjectApplication.java
+++ b/src/main/java/com/greenfoxacademy/springwebapp/BasicSpringProjectApplication.java
@@ -1,13 +1,39 @@
 package com.greenfoxacademy.springwebapp;
 
+import com.greenfoxacademy.springwebapp.models.Product;
+import com.greenfoxacademy.springwebapp.models.ProductType;
+import com.greenfoxacademy.springwebapp.repositories.ProductRepository;
+import com.greenfoxacademy.springwebapp.repositories.ProductTypeRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.CommandLineRunner;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
-public class BasicSpringProjectApplication {
+public class BasicSpringProjectApplication implements CommandLineRunner {
 
-  public static void main(String[] args) {
-    SpringApplication.run(BasicSpringProjectApplication.class, args);
-  }
+    private ProductRepository productRepository;
+    private ProductTypeRepository productTypeRepository;
 
+    @Autowired
+    public BasicSpringProjectApplication(ProductRepository productRepository,
+                                         ProductTypeRepository productTypeRepository) {
+        this.productRepository = productRepository;
+        this.productTypeRepository = productTypeRepository;
+    }
+
+    public static void main(String[] args) {
+        SpringApplication.run(BasicSpringProjectApplication.class, args);
+    }
+
+    @Override
+    public void run(String... args) throws Exception {
+        Product p1 = new Product("Vonaljegy", 450, 90, "vonaljegy BP-n 90 percre!");
+        Product p2 = new Product("Vonaljegy", 360, 90, "vonaljegy BP agglomerációjában 90 percre!");
+        ProductType t1 = new ProductType("Jegy");
+
+        t1.addProduct(p1);
+        t1.addProduct(p2);
+        productTypeRepository.save(t1);
+    }
 }
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/controllers/ProductController.java b/src/main/java/com/greenfoxacademy/springwebapp/controllers/ProductController.java
new file mode 100644
index 0000000..ec84044
--- /dev/null
+++ b/src/main/java/com/greenfoxacademy/springwebapp/controllers/ProductController.java
@@ -0,0 +1,26 @@
+package com.greenfoxacademy.springwebapp.controllers;
+
+import com.greenfoxacademy.springwebapp.dtos.ProductListResponseDTO;
+import com.greenfoxacademy.springwebapp.services.ProductServiceImp;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RestController;
+
+@RestController
+@RequestMapping(path = "/api")
+public class ProductController {
+
+    private ProductServiceImp productServiceImp;
+
+    @Autowired
+    public ProductController(ProductServiceImp productServiceImp) {
+        this.productServiceImp = productServiceImp;
+    }
+
+    @RequestMapping(path = "/products", method = RequestMethod.GET)
+    public ResponseEntity<ProductListResponseDTO> getAvailableProducts() {
+        return ResponseEntity.status(200).body(productServiceImp.getAvailableProductsInDTO());
+    }
+}
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/dtos/ProductDTO.java b/src/main/java/com/greenfoxacademy/springwebapp/dtos/ProductDTO.java
new file mode 100644
index 0000000..8ae718a
--- /dev/null
+++ b/src/main/java/com/greenfoxacademy/springwebapp/dtos/ProductDTO.java
@@ -0,0 +1,76 @@
+package com.greenfoxacademy.springwebapp.dtos;
+
+public class ProductDTO {
+
+    private Long id;
+
+    private String name;
+
+    private int price;
+
+    private int duration;
+
+    private String description;
+
+    private String type;
+
+    public ProductDTO() {
+    }
+
+    public ProductDTO(Long id, String name, int price, int duration, String description, String type) {
+        this.id = id;
+        this.name = name;
+        this.price = price;
+        this.duration = duration;
+        this.description = description;
+        this.type = type;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getPrice() {
+        return price;
+    }
+
+    public void setPrice(int price) {
+        this.price = price;
+    }
+
+    public int getDuration() {
+        return duration;
+    }
+
+    public void setDuration(int duration) {
+        this.duration = duration;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getType() {
+        return type;
+    }
+
+    public void setType(String type) {
+        this.type = type;
+    }
+}
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/dtos/ProductListResponseDTO.java b/src/main/java/com/greenfoxacademy/springwebapp/dtos/ProductListResponseDTO.java
new file mode 100644
index 0000000..3831836
--- /dev/null
+++ b/src/main/java/com/greenfoxacademy/springwebapp/dtos/ProductListResponseDTO.java
@@ -0,0 +1,23 @@
+package com.greenfoxacademy.springwebapp.dtos;
+
+import com.greenfoxacademy.springwebapp.models.Product;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ProductListResponseDTO {
+
+    private List<ProductDTO> products;
+
+    public ProductListResponseDTO() {
+        products = new ArrayList<>();
+    }
+
+    public List<ProductDTO> getProducts() {
+        return products;
+    }
+
+    public void add(ProductDTO product) {
+        products.add(product);
+    }
+}
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/models/Product.java b/src/main/java/com/greenfoxacademy/springwebapp/models/Product.java
new file mode 100644
index 0000000..c93136b
--- /dev/null
+++ b/src/main/java/com/greenfoxacademy/springwebapp/models/Product.java
@@ -0,0 +1,79 @@
+package com.greenfoxacademy.springwebapp.models;
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import jakarta.persistence.*;
+
+@Entity
+@Table(name = "products")
+public class Product {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+
+    private String name;
+
+    private int price;
+
+    private int duration;
+
+    private String description;
+
+    @JsonIgnoreProperties(ignoreUnknown = true, value = {"id", "productList"})
+    @ManyToOne
+    private ProductType type;
+
+    public Product() {
+    }
+
+    public Product(String name, int price, int duration, String description) {
+        this.name = name;
+        this.price = price;
+        this.duration = duration;
+        this.description = description;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public int getPrice() {
+        return price;
+    }
+
+    public void setPrice(int price) {
+        this.price = price;
+    }
+
+    public int getDuration() {
+        return duration;
+    }
+
+    public void setDuration(int duration) {
+        this.duration = duration;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public ProductType getType() {
+        return type;
+    }
+
+    public void setType(ProductType type) {
+        this.type = type;
+    }
+}
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/models/ProductType.java b/src/main/java/com/greenfoxacademy/springwebapp/models/ProductType.java
new file mode 100644
index 0000000..ca0baf5
--- /dev/null
+++ b/src/main/java/com/greenfoxacademy/springwebapp/models/ProductType.java
@@ -0,0 +1,52 @@
+package com.greenfoxacademy.springwebapp.models;
+
+import jakarta.persistence.*;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Entity
+@Table(name = "product_types")
+public class ProductType {
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private String name;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "type", fetch = FetchType.EAGER)
+    private List<Product> productList;
+
+    public ProductType() {
+        productList = new ArrayList<>();
+    }
+
+    public ProductType(String name) {
+        this();
+        this.name = name;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public List<Product> getProductList() {
+        return productList;
+    }
+
+    public void setProductList(List<Product> productList) {
+        this.productList = productList;
+    }
+
+    public void addProduct(Product product) {
+        productList.add(product);
+        product.setType(this);
+    }
+}
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/repositories/ProductRepository.java b/src/main/java/com/greenfoxacademy/springwebapp/repositories/ProductRepository.java
new file mode 100644
index 0000000..e2dfacb
--- /dev/null
+++ b/src/main/java/com/greenfoxacademy/springwebapp/repositories/ProductRepository.java
@@ -0,0 +1,14 @@
+package com.greenfoxacademy.springwebapp.repositories;
+
+import com.greenfoxacademy.springwebapp.models.Product;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface ProductRepository extends JpaRepository<Product, Long> {
+
+    @Override
+    List<Product> findAll();
+}
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/repositories/ProductTypeRepository.java b/src/main/java/com/greenfoxacademy/springwebapp/repositories/ProductTypeRepository.java
new file mode 100644
index 0000000..fd1602d
--- /dev/null
+++ b/src/main/java/com/greenfoxacademy/springwebapp/repositories/ProductTypeRepository.java
@@ -0,0 +1,7 @@
+package com.greenfoxacademy.springwebapp.repositories;
+
+import com.greenfoxacademy.springwebapp.models.ProductType;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface ProductTypeRepository extends JpaRepository<ProductType, Long> {
+}
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/services/HelloServiceImpl.java b/src/main/java/com/greenfoxacademy/springwebapp/services/HelloServiceImpl.java
index 04bde96..e59179f 100644
--- a/src/main/java/com/greenfoxacademy/springwebapp/services/HelloServiceImpl.java
+++ b/src/main/java/com/greenfoxacademy/springwebapp/services/HelloServiceImpl.java
@@ -6,6 +6,6 @@ import org.springframework.stereotype.Service;
 public class HelloServiceImpl implements HelloService {
 
   public String getHelloWorld() {
-    return "Hello World!!!";
+    return "Hello World!";
   }
 }
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/services/ProductService.java b/src/main/java/com/greenfoxacademy/springwebapp/services/ProductService.java
new file mode 100644
index 0000000..1bcb4b7
--- /dev/null
+++ b/src/main/java/com/greenfoxacademy/springwebapp/services/ProductService.java
@@ -0,0 +1,7 @@
+package com.greenfoxacademy.springwebapp.services;
+
+import com.greenfoxacademy.springwebapp.dtos.ProductListResponseDTO;
+
+public interface ProductService {
+    ProductListResponseDTO getAvailableProductsInDTO();
+}
diff --git a/src/main/java/com/greenfoxacademy/springwebapp/services/ProductServiceImp.java b/src/main/java/com/greenfoxacademy/springwebapp/services/ProductServiceImp.java
new file mode 100644
index 0000000..39b7768
--- /dev/null
+++ b/src/main/java/com/greenfoxacademy/springwebapp/services/ProductServiceImp.java
@@ -0,0 +1,30 @@
+package com.greenfoxacademy.springwebapp.services;
+
+import com.greenfoxacademy.springwebapp.dtos.ProductDTO;
+import com.greenfoxacademy.springwebapp.dtos.ProductListResponseDTO;
+import com.greenfoxacademy.springwebapp.models.Product;
+import com.greenfoxacademy.springwebapp.repositories.ProductRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class ProductServiceImp implements ProductService {
+
+    private ProductRepository productRepository;
+
+    @Autowired
+    public ProductServiceImp(ProductRepository productRepository) {
+        this.productRepository = productRepository;
+    }
+
+    public ProductListResponseDTO getAvailableProductsInDTO() {
+        List<Product> productList = productRepository.findAll();
+        ProductListResponseDTO productDTOs = new ProductListResponseDTO();
+        for (Product product : productList) {
+            productDTOs.add(new ProductDTO(product.getId(), product.getName(), product.getPrice(), product.getDuration(), product.getDescription(), product.getType().getName()));
+        }
+        return productDTOs;
+    }
+}
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
index 8b13789..e044841 100644
--- a/src/main/resources/application.properties
+++ b/src/main/resources/application.properties
@@ -1 +1,7 @@
-
+spring.datasource.url=jdbc:mysql://localhost/foxticket?serverTimezone=UTC
+spring.datasource.username=root
+spring.datasource.password=password
+spring.jpa.hibernate.ddl-auto=create-drop
+spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
+spring.logging.level.org.hibernate.SQL=debug
+spring.jpa.show-sql=true
diff --git a/src/test/java/com/greenfoxacademy/springwebapp/controllers/ProductControllerTest.java b/src/test/java/com/greenfoxacademy/springwebapp/controllers/ProductControllerTest.java
new file mode 100644
index 0000000..516c73a
--- /dev/null
+++ b/src/test/java/com/greenfoxacademy/springwebapp/controllers/ProductControllerTest.java
@@ -0,0 +1,29 @@
+package com.greenfoxacademy.springwebapp.controllers;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.web.servlet.MockMvc;
+
+import static org.hamcrest.Matchers.hasSize;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+@SpringBootTest
+@AutoConfigureMockMvc
+class ProductControllerTest {
+
+    @Autowired
+    MockMvc mvc;
+
+    @Test
+    void getAvailableProducts_ReturnAListAnd200() throws Exception {
+        mvc.perform(get("/api/products"))
+                .andExpect(status().is(200))
+                .andExpect(jsonPath("$['products']").value(hasSize(2)))
+                .andExpect(jsonPath("$['products'][0]['id']").value(1))
+                .andExpect(jsonPath("$['products'][1]['id']").value(2));
+    }
+}
\ No newline at end of file
